name: CI
on:
  pull_request:
  push:
    branches: [ master, staging, feature/** ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_DATABASE: testing
          MYSQL_USER: laravel
          MYSQL_PASSWORD: secret
          MYSQL_ROOT_PASSWORD: root
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -proot"
          --health-interval=10s --health-timeout=5s --health-retries=5
      redis:
        image: redis:7
        ports: ["6379:6379"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: composer:v2
          coverage: none

      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      - name: Install deps
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Prepare .env
        run: |
          cp .env.example .env
          php -r "file_put_contents('.env', preg_replace('/DB_CONNECTION=.*/','DB_CONNECTION=mysql', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/DB_DATABASE=.*/','DB_DATABASE=testing', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/DB_USERNAME=.*/','DB_USERNAME=root', file_get_contents('.env')));"
          php -r "file_put_contents('.env', preg_replace('/DB_PASSWORD=.*/','DB_PASSWORD=root', file_get_contents('.env')));"
          php artisan key:generate

      - name: Wait for DB
        run: until mysql -h 127.0.0.1 -uroot -proot -e "select 1" >/dev/null 2>&1; do sleep 2; done

      - name: Migrate
        run: php artisan migrate --force

      - name: Lint
        run: vendor/bin/pint --test || true

      - name: Static Analyse
        run: vendor/bin/phpstan analyse --memory-limit=1G || true

      - name: Tests
        run: php artisan test --parallel
